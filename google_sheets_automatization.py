import gspread
#from oauth2client.service_account import ServiceAccountCredentials
import pandas as pd
#import requests as req
import json
import re as re
#from datetime import datetime
#import datetime
#import plotly.express as px
#from bs4 import BeautifulSoup
#from pandas.tseries.offsets import MonthEnd
#from datetime import datetime
#import datetime
#import datetime
#import requests
#import numpy as np
import json
#from datetime import datetime
#import df2gspread as d2g
import pygsheets




gc = pygsheets.authorize(service_file='D:\Загрузки\Pitching-9f5ef2fa7cdc.json')
#open the google spreadsheet (where 'PY to Gsheet Test' is the name of my sheet)
sh = gc.open('Аналитика')
wks1 = sh[1]
wks2 = sh[2]
wks4 = sh[4]

#vse_objec = sh[2]
vse_objec = sh.worksheet_by_title("Проект 1")
datafra = vse_objec.get_as_df(start='A1',end='AY10000')
data=datafra.reset_index()
lst =[]
for i in data['index']:
    i+=2
    lst.append(i)
data['indx']= lst


condition_list = ['Средний слой гипсовой штукатурки (до)',
 'Средний слой цпс штукатруки (до)',
 'Улучшенная гипсовая штукатурка стен (грунтование, установка маяков, штукатурные работы, удаление маяков; углы на кухне и в с/у под 90*) ',
 'Высококачественная гипсовая штукатурка стен (грунтование, установка маяков, штукатурные работы, удаление маяков; углы на кухне и в с/у под 90*) ',
 'Улучшенная гипсовая штукатурка поверхностей стен менее 40см шириной',
 'Высококачественная гипсовая штукатурка повенрхностей стен менее 40см шириной ',
 'Гипсовая штукатурка оконных откосов с установкой примыкающего профиля (для избежания трещин)',
 'Улучшенная гипсовая штукатурка потолка (грунтование, установка маяков, штукатурные работы, удаление маяков) ',
 'Высококачественная гипсовая штукатурка потолка (грунтование, установка маяков, штукатурные работы, удаление маяков) ',
 'Улучшенная гипсовая штукатурка плоскостей потолка менее 40 см шириной',
 'Высококачественная гипсовая штукатурка плоскостей потолка менее 40 см шириной',
 'Глянцевание стен',
 'Волма Гипс-Актив (серая); грунтовка Knauf Миттельгрунт; бетоноконтакт; маяки; уголки. (из расчета среднего слоя указанного в параметрах)',
 'Волма Гипс-Актив (белая); грунтовка Knauf Миттельгрунт; бетоноконтакт; маяки; уголки. (из расчета среднего слоя указанного в параметрах)',
 'Weber vetonit base gypse (белая); грунтовка Knauf Миттельгрунт; бетоноконтакт; маяки; уголки. (из расчета среднего слоя указанного в параметрах)',
 'Волма Гипс-Актив ЭКСТРА;  грунтовка Knauf Миттельгрунт; бетоноконтакт; маяки; уголки. (из расчета среднего слоя указанного в параметрах)',
 'KNAUF MP75 (белая); грунтовка Knauf Миттельгрунт; бетоноконтакт; маяки; уголки. (из расчета среднего слоя указанного в параметрах)',
 'Улучшенная цементно-песчаная (гипсовая влагостойкая) штукатурка стен. Подготовка и  Грунтовка стен влажных помещений.Установка штукатурных маяков. Выведение углов в 90* в с/у. ',
 'Высококачественная цементно-песчаная (гипсовая влагостойкая) штукатурка стен. Подготовка и  Грунтовка стен влажных помещений.Установка штукатурных маяков. Выведение углов в 90* в с/у. ',
 'Улучшенная цементно-песчаная (гипсовая влагостойкая) штукатурка плоскостей стен шириной менее 40см. Подготовка и Грунтовка стен.Установка штукатурных маяков.',
 'Высококачественная цементно-песчаная (гипсовая влагостойкая) штукатурка плоскостей стен шириной менее 40см. Подготовка и Грунтовка стен.Установка штукатурных маяков.',
 'Цементно-песчаная (гипсовая влагостойкая) штукатурка оконных откосов. Подготовка и Грунтовка откосов влажных и наружных помещений.Установка уголков.',
 'Удаление маяков ЦПС (влагостойкой) штукатурки ',
 'Затирка ЦПС (влагостойкой) штукатурки',
 'Влагостойкая гипсовая штукатурка Старатели Оптимум; грунтовка, бетоноконтакт; маяки (из расчета среднего слоя указанного в параметрах)',
 'Kreisel 521 до 2 см; цементный набрызг; маяки (из расчета среднего слоя указанного в параметрах)',
 'Kreisel 501 до 5 см; цементный набрызг; маяки (из расчета среднего слоя указанного в параметрах)',
 'Доставка и разгрузка материалов',
 'Разгрузка через паркинг',
 'Дополнительные углы под 90*',
 'Весь объем работ под 90*',
 'Монтаж штукатурных защитных уголков',
 'Проклейка стыков разных оснований (работа+материал)',
 'Монтаж стеклотканевой сетки (работа+материал)',
 'Высотные работы (высота стен более 3-х метров)',
 'Высотные работы (высота стен более 6-ти метров)',
 'Штукатурные работы труднодоступных поверхностей',
 'Снятие-установка радиатора на существующие места (без замены радиатора)',
 'Монтаж стальной сетки (работа+материал)',
 'Вынос мусора',
 'Вывоз мусора (заказ контейнера+загрузка)',
 'Спецмонтажные работы',
 'Проживание в хостеле/общежитии',
 'Подъем материала на этаж (без лифта)',
 'Подъем станции на этаж (без лифта)']

volume_work = data[[
    'Улучшенная гипсовая штукатурка стен (грунтование, установка маяков, штукатурные работы, удаление маяков; углы на кухне и в с/у под 90*) ',
    'Высококачественная гипсовая штукатурка стен (грунтование, установка маяков, штукатурные работы, удаление маяков; углы на кухне и в с/у под 90*) ',
    'Улучшенная гипсовая штукатурка поверхностей стен менее 40см шириной',
    'Высококачественная гипсовая штукатурка повенрхностей стен менее 40см шириной ',
    'Гипсовая штукатурка оконных откосов с установкой примыкающего профиля (для избежания трещин)',
    'Улучшенная гипсовая штукатурка потолка (грунтование, установка маяков, штукатурные работы, удаление маяков) ',
    'Высококачественная гипсовая штукатурка потолка (грунтование, установка маяков, штукатурные работы, удаление маяков) ',
    'Улучшенная гипсовая штукатурка плоскостей потолка менее 40 см шириной',
    'Высококачественная гипсовая штукатурка плоскостей потолка менее 40 см шириной',
    'Улучшенная цементно-песчаная (гипсовая влагостойкая) штукатурка стен. Подготовка и  Грунтовка стен влажных помещений.Установка штукатурных маяков. Выведение углов в 90* в с/у. ',
    'Высококачественная цементно-песчаная (гипсовая влагостойкая) штукатурка стен. Подготовка и  Грунтовка стен влажных помещений.Установка штукатурных маяков. Выведение углов в 90* в с/у. ',
    'Улучшенная цементно-песчаная (гипсовая влагостойкая) штукатурка плоскостей стен шириной менее 40см. Подготовка и Грунтовка стен.Установка штукатурных маяков.',
    'Высококачественная цементно-песчаная (гипсовая влагостойкая) штукатурка плоскостей стен шириной менее 40см. Подготовка и Грунтовка стен.Установка штукатурных маяков.',
    'Цементно-песчаная (гипсовая влагостойкая) штукатурка оконных откосов. Подготовка и Грунтовка откосов влажных и наружных помещений.Установка уголков.']]



vse_objec.clear(start='C2', end='AY10000')

# рабочий скрипт для гипсовая штукатурка
for i, row in data.iterrows():
    try:
        gsheet = gc.open_by_url(f"{row['Выгрузка в таблицу']}")
        wks = gsheet[0]
        df = wks.get_as_df(start='A1', end='H10000')
        # df=df.fillna(0)
        condition = df.loc[(df[
                                'positionName'] == 'Высококачественная гипсовая штукатурка потолка (грунтование, установка маяков, штукатурные работы, удаление маяков) ') |
                           (df[
                                'positionName'] == 'Улучшенная гипсовая штукатурка потолка (грунтование, установка маяков, штукатурные работы, удаление маяков) ') |
                           (df[
                                'positionName'] == "Высококачественная гипсовая штукатурка стен (грунтование, установка маяков, штукатурные работы, удаление маяков; углы на кухне и в с/у под 90*) ") |
                           (df[
                                'positionName'] == "Улучшенная гипсовая штукатурка стен (грунтование, установка маяков, штукатурные работы, удаление маяков; углы на кухне и в с/у под 90*) ")]
        to_ex = condition.loc[(condition['parameterName'] == "объем")]
        # to_ex['value'] = to_ex['value'].fillna(0)
        # to_ex['value'] = pd.to_numeric(to_ex['value'], downcast='integer')
        # to_ex['value'] = to_ex['value'].astype(int)
        vse_objec.update_value('C' + str(row["indx"]), f'{to_ex["value"].replace("", 0).fillna(0).astype(int).sum()}')
        # /////////////////////////////////////////////////////////////////////////////////
        condition1 = df.loc[(df[
                                 'positionName'] == 'Улучшенная цементно-песчаная (гипсовая влагостойкая) штукатурка стен. Подготовка и  Грунтовка стен влажных помещений.Установка штукатурных маяков. Выведение углов в 90* в с/у. ') |
                            (df[
                                 'positionName'] == 'Высококачественная цементно-песчаная (гипсовая влагостойкая) штукатурка стен. Подготовка и  Грунтовка стен влажных помещений.Установка штукатурных маяков. Выведение углов в 90* в с/у. ') |
                            (df[
                                 'positionName'] == 'Улучшенная цементно-песчаная (гипсовая влагостойкая) штукатурка плоскостей стен шириной менее 40см. Подготовка и Грунтовка стен.Установка штукатурных маяков.')]

        to_export = condition1.loc[(condition1['parameterName'] == "объем") & (condition1['categoryId'] == 3)]
        # to_ex['value'] = to_ex['value'].fillna(0)
        # to_export['value'] = pd.to_numeric(to_export['value'], downcast='integer')
        # to_export['value'] = to_export['value'].astype(int)
        vse_objec.update_value('D' + str(row["indx"]),
                               f'{to_export["value"].replace("", 0).fillna(0).astype(int).sum()}')
        # /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        condition_list_ex = []
        for i in condition_list:
            condition = df.loc[(df['positionName'] == i)]
            to_ex = condition.loc[
                (condition['parameterName'] == "толщина слоя") | (condition['parameterName'] == "объем") & (
                            condition['categoryId'] == 3)]
            to_ex['value'] = pd.to_numeric(to_ex['value'])
            # o_ex['value'] = to_ex['value'].fillna(0)
            # to_ex['value'] = to_ex['value'].astype(int)
            # print(to_ex['value'].sum())
            s = to_ex["value"].replace("", 0).fillna(0).sum()
            condition_list_ex.append(s)
            ind = row['indx']
        vse_objec.update_row(ind, [int(a) for a in condition_list_ex], col_offset=4)
        # ////////////////////////////////////////////////////////////////////////////////////////////////////

    except:
        # wks1.update_value(f"С{row['indx']}", 0)
        print("fall")

volume_work["сумма"] = volume_work.sum(axis=1)
wks2 = sh[1]
tech = wks2.get_as_df(has_header=False, include_tailing_empty_rows=False, start='A2', end='F36')
tech = tech.fillna(0)
tech = tech.apply(pd.to_numeric, errors='ignore', downcast='integer')
# tech['index'] = tech[[0]]
tech.insert(1, 'сумма', '')
tech.rename(columns={0: 'index', 1: '<100', 2: '<200', 3: '<400', 4: '<1000', 5: '>1000'}, inplace=True)
tech = tech.dropna()
left = volume_work.transpose()
left = left.reset_index()
data_df = pd.merge(left, tech, on='index', how='inner')
condition = data_df[data_df.columns[-5:]]

data_transpose = data.transpose()
data1 = data_transpose.reset_index()
data_df1 = pd.merge(data1, tech, on='index', how='inner')

for column, row, col in zip(data_df[data_df.columns[1:-6]], data['indx'], data_df1[data_df1.columns[1:-6]]):
    try:
        val = data_df[column].to_list()
        list_val = data_df1[col].to_list()
        summa = sum(val)
        vse_objec.update_value('AX' + str(row), f"{summa}")
        if sum(val) < 100:

            cond_list = data_df1['<100'].to_list()
            nums = sum([i * j for i, j in zip(list_val, cond_list)])
        elif sum(val) < 200:
            cond_list = data_df1['<200'].to_list()
            nums = sum([i * j for i, j in zip(list_val, cond_list)])
        elif sum(val) < 400:
            cond_list = data_df1['<400'].to_list()
            nums = sum([i * j for i, j in zip(list_val, cond_list)])
        elif sum(val) < 1000:
            cond_list = data_df['<1000'].to_list()
            nums = sum([i * j for i, j in zip(list_val, cond_list)])
        else:
            conder = data_df1['>1000'].to_list()
            nums = sum([i * j for i, j in zip(list_val, cond_list)])
        # print(nums)
        vse_objec.update_value('AY' + str(row), f"{nums}")
    except:
        print('fall')
# except:
#     print('no')




